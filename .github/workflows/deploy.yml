name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main","develop"]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: sosombucket
  CODE_DEPLOY_APPLICATION_NAME: codedeploy-sosom
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: codedeploy-group-sosom

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 8 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # application.yml 생성
      - name: make application.yml
        run:
          touch ./src/main/resources/application.yml
        shell: bash

      # application.yml 내용 추가
      - name: deliver application.yml
        run: echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash

      # aws.yml 생성
      - name: make aws.yml
        run:
          touch ./src/main/resources/aws.yml
        shell: bash

      # aws.yml 내용 추가
      - name: deliver aws.yml
        run: echo "${{ secrets.AWS_YML }}" > ./src/main/resources/aws.yml
        shell: bash

      # auth2.yml 생성
      - name: make oauth2.yml
        run:
          touch ./src/main/resources/oauth2.yml
        shell: bash

      # auth2.yml 내용 추가
      - name: deliver aws.yml
        run: echo "${{ secrets.OAUTH2_YML }}" > ./src/main/resources/oauth2.yml
        shell: bash

      # swagger.yml 생성
      - name: make swagger.yml
        run:
          touch ./src/main/resources/swagger.yml
        shell: bash

      # swagger.yml 내용 추가
      - name: deliver swagger.yml
        run: echo "${{ secrets.SWAGGER_YML }}" > ./src/main/resources/swagger.yml
        shell: bash

      # (3) Gradle build
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: run test
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: test

      - name: run build
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/spring/$GITHUB_SHA.zip \
            --source .

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=spring/$GITHUB_SHA.zip,bundleType=zip
